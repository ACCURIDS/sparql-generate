BASE <https://ci.mines-stetienne.fr/aqi/data/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX ssn: <http://purl.oclc.org/NET/ssnx/ssn#>
PREFIX aqio: <https://ci.mines-stetienne.fr/aqi/ontology#>
PREFIX seas: <https://w3id.org/seas/>

GENERATE {

  <loc/{?idx}> a sosa:FeatureOfInterest;
    rdfs:label ?name;
    rdfs:seeAlso ?url ;
    geo:lat ?lat;
    geo:long ?long .
  
  <{?idx}/observations/{?t}#aqi> a aqio:AirQualityIndexObservation;
    sosa:resultTime "{?dateTime}{?tz}"^^xsd:dateTime;
    sosa:hasSimpleResult ?aqi;
    sosa:hasFeatureOfInterest <loc/{?idx}>;
    sosa:observedProperty <loc/{?idx}#aqi> .
      
  <loc/{?idx}#aqi> a aqio:AirQualityIndexProperty;
    ssn:isPropertyOf <loc/{?idx}> .

  GENERATE {
    <pollution> a sosa:FeatureOfInterest;
      rdfs:label "global atmospheric pollution" .

    <pollution#aqi> a aqio:AirQualityIndexProperty ;
      ssn:isPropertyOf <pollution> .

    <pollution/observations#aqi-min> a seas:MinimumEvaluation ;
      seas:hasSimpleValue ?{ min(?aqi) } ;
      seas:evaluationOf <pollution#aqi>  .

    <pollution/observations#aqi-max> a seas:MaximumEvaluation ;
      seas:hasSimpleValue ?{ max(?aqi) } ;
      seas:evaluationOf <pollution#aqi>  .

    <pollution/observations#aqi-avg> a seas:AverageEvaluation ;
      seas:hasSimpleValue ?{ avg(?aqi) } ;
      seas:evaluationOf <pollution#aqi>  .

  } WHERE {
    FILTER(BOUND(?aqi))
  } .
}
ITERATOR iter:for(0,1,10) AS ?index
SOURCE <https://ci.mines-stetienne.fr/aqi/static/station/{STR(?index)}> AS ?source
WHERE {
  BIND(STR(xsd:integer(fun:JSONPath(?source,"$.data.idx"))) AS ?idx)
  BIND(fun:JSONPath(?source,"$.data.city.name") AS ?name)
  BIND(IRI(fun:JSONPath(?source,"data.city.url")) AS ?url)
  BIND(xsd:decimal(fun:JSONPath(?source,"$.data.city.geo[0]")) AS ?lat)
  BIND(xsd:decimal(fun:JSONPath(?source,"$.data.city.geo[1]")) AS ?long)
  BIND(STR(xsd:integer(fun:JSONPath(?source,"$.data.time.v"))) AS ?t)
  BIND(REPLACE(fun:JSONPath(?source,"$.data.time.s")," ","T") AS ?dateTime)
  BIND(fun:JSONPath(?source,"$.data.time.tz") AS ?tz)
  BIND(xsd:integer(fun:JSONPath(?source,"$.data.aqi")) AS ?aqi)
  
  BIND(fun:JSONPath(?source,"$.data.iaqi") AS ?iaqi)
  # a dateTime with timezone can be constructed with SPARQL functions:
  # BIND( STRDT( CONCAT( ?dateTime , ?tz ) , xsd:dateTime) AS ?resultTime )
  # but we do it in a more lightweight way using SPARQL-Generate syntactic sugar:  "{?dateTime}{?tz}"^^xsd:dateTime
}