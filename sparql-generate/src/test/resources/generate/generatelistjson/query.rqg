BASE <http://example.com/> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.com/> 
PREFIX ite: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
GENERATE { 

   <myList1> ex:contains ?list1 .
    ?this1 rdf:first ?att1; rdf:rest ?rest1 .

   <myList2> ex:contains ?list2 .
    ?this2 rdf:first ?att2; rdf:rest ?rest2 .

    # TODO: next cool extension would be to make this easier:
    # <myList2> ex:contains LIST( ?att2 ) .

}
SOURCE <http://example.com/list.json> AS ?source
ITERATOR ite:JSONPath( ?source, "$.att[*]" , "$.att1" , "$.att2") AS ?element ?att1 ?att2 ?position ?hasNext
WHERE {

    BIND( fun:bnode( STR( ( ?position + 1 ) * 3 ) ) AS ?this1 )
    BIND( fun:bnode( STR( ( ?position + 1 ) * 7 ) ) AS ?this2 )

    BIND( IF( 0 = ?position , ?this1 , ?unbound ) AS ?list1 )
    BIND( IF( 0 = ?position , ?this2 , ?unbound ) AS ?list2 )
    
    BIND( IF( true = ?hasNext , fun:bnode( STR( ( ?position + 2 ) * 3 ) ) , rdf:nil ) AS ?rest1 )
    BIND( IF( true = ?hasNext , fun:bnode( STR( ( ?position + 2 ) * 7 ) ) , rdf:nil ) AS ?rest2 )
}